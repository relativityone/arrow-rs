searchState.loadedDescShard("parquet_variant", 0, "Implementation of Variant Binary Encoding from Apache …\nA builder for creating <code>Variant::List</code> values.\nA builder for creating <code>Variant::Object</code> values.\nVariant value. May contain references to metadata and value\nBuilder for <code>Variant</code> values\nRepresents a variant array.\nEncodes the Variant Metadata, see the Variant spec file …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA builder for creating <code>Variant::List</code> values.\nA builder for creating <code>Variant::Object</code> values.\nBuilder for <code>Variant</code> values\nAdd key to dictionary, return its ID\nAdd a field with key and value to the object\nFinalize object with sorted fields\nHelper to make room for header by moving data\nCreate an <code>ListBuilder</code> for creating <code>Variant::List</code> values.\nCreate an <code>ObjectBuilder</code> for creating <code>Variant::Object</code> …\nWrite little-endian integer to buffer\nDecodes a Binary from the value section of a variant.\nDecodes a Date from the value section of a variant.\nDecodes a Decimal16 from the value section of a variant.\nDecodes a Decimal4 from the value section of a variant.\nDecodes a Decimal8 from the value section of a variant.\nDecodes a Double from the value section of a variant.\nDecodes a Float from the value section of a variant.\nDecodes an Int16 from the value section of a variant.\nDecodes an Int32 from the value section of a variant.\nDecodes an Int64 from the value section of a variant.\nDecodes an Int8 from the value section of a variant.\nDecodes a long string from the value section of a variant.\nDecodes a short string from the value section of a variant.\nDecodes a TimestampMicros from the value section of a …\nDecodes a TimestampNtzMicros from the value section of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts the basic type from a header byte\nExtract the primitive type from a Variant value-metadata …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTo be used in <code>map_err</code> when unpacking an integer from a …\nTo be used in <code>map_err</code> when unpacking an integer from a …\nHelper to get a &amp;str from a slice based on range, if it’…\nPerforms a binary search on a slice using a fallible key …\nVariant value. May contain references to metadata and value\nRepresents a variant array.\nEncodes the Variant Metadata, see the Variant spec file …\nConverts this variant to a <code>bool</code> if possible.\nView the raw bytes (needed by very low-level decoders)\nConverts this variant to a <code>DateTime&lt;Utc&gt;</code> if possible.\nConverts this variant to tuple with a 16-byte unscaled …\nConverts this variant to tuple with a 4-byte unscaled …\nConverts this variant to tuple with an 8-byte unscaled …\nConverts this variant to an <code>f32</code> if possible.\nConverts this variant to an <code>f64</code> if possible.\nConverts this variant to an <code>i16</code> if possible.\nConverts this variant to an <code>i32</code> if possible.\nConverts this variant to an <code>i64</code> if possible.\nConverts this variant to an <code>i8</code> if possible.\nConverts this variant to a <code>NaiveDate</code> if possible.\nConverts this variant to a <code>NaiveDateTime</code> if possible.\nConverts this variant to <code>()</code> if it is null.\nConverts this variant to a <code>&amp;str</code> if possible.\nConverts this variant to a <code>&amp;[u8]</code> if possible.\nGet the dictionary size\nGet all key-names as an Iterator of strings\nReturns the byte offset where the offset array starts\nReturns the byte offset where the values start\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the key-name by index\nGets the field using an offset (Range) - helper method to …\nGet a single offset by index\nHelper method to get the offset start and end range for a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the object contains no key-value pairs\nIs the array of zero length\nReturns whether this is a large list\nWhether the dictionary keys are sorted and unique\nReturns the number of key-value pairs in this object\nReturn the length of this array\nReturns the number of key-value pairs in this object\nReturns the number of elements in this list\nReturns the offset size in bytes\nNote: This is <code>offset_size_minus_one</code> + 1\nGet the offsets as an iterator\nParse field IDs and field offsets arrays using the cached …\nParse all fields into a vector for iteration\nBuild from the <code>offset_size_minus_one</code> bits (see spec).\nTries to construct the variant metadata header, which has …\nCreate a new <code>Variant</code> from metadata and value.\nCreate a new variant with existing metadata\nReturn one unsigned little-endian value from <code>bytes</code>.")